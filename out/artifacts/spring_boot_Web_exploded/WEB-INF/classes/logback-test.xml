<?xml version="1.0" encoding="UTF-8"?>
<!--
    scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--用来设置上下文名称，每个logger都关联到logger上下文，默认上下文名称为default-->
    <contextName>wang-demo</contextName>
    <!--定义日志的根目录变量值-->
    <property name="LOG_HOME" value="logs"/>
    <!--定义日志文件名称变量值-->
    <property name="moudleName" value="wang-admin"/>
    <!--ch.qos.logback.core.ConsoleAppender表示Console输出-->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <withJansi>true</withJansi>
        <!--
            日志输出格式：
            %d表示日期时间，
            %thread表示线程名，
            %-5level：级别从左显示5个字符宽度
            %logger{50}表示logger名字最长50个字符，否则按照句点分割。
            %msg：日志消息，
            %n是换行符
        -->
        <encoder>
            <!--格式化输出：%d:表示日期    %thread:表示线程名     %-5level:级别从左显示5个字符宽度  %msg:日志消息    %n:是换行符-->
            <pattern>%black(Console -) %red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger) - %cyan(%msg%n)</pattern>
            <charset>UTF-8</charset>
        </encoder>

        <layout class="ch.qos.logback.classic.PatternLayout">
            <!--
                日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能
                如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误
                noapplicableactionfor[springProfile]
            -->
            <springProfile name="dev">
                <pattern>%black(dev Console -) %red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{10}) - %cyan(%msg%n)</pattern>
            </springProfile>

            <springProfile name="!dev">
                <pattern>%black(!dev Console -)  %red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{10}) - %cyan(%msg%n)</pattern>
            </springProfile>
        </layout>
    </appender>

    <!-- appender输出目的地（Console、文件、远程服务器、数据库） -->
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <appender name="appLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--指定日志文件的名称-->
        <file>${LOG_HOME}/${moudleName}.log</file>
        <!--
                当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名
                TimeBasedRollingPolicy：最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
                滚动时产生的文件的存放位置及文件名称%d{yyyy-MM-dd}：按天进行日志滚动
                %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->
            <fileNamePattern>${LOG_HOME}/${moudleName}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!--
                    可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
                    且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，
                    那些为了归档而创建的目录也会被删除。
            -->
            <MaxHistory>365</MaxHistory>
            <!--
                    当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>1MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!--日志输出格式：-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%black(Console-) %red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{10}) - %cyan(%msg%n)</pattern>
        </layout>
    </appender>

    <!--
            logger主要用于存放日志对象，也可以定义日志类型、级别
            name：表示匹配的logger类型前缀，也就是包的前半部分
            level：要记录的日志级别，包括TRACE<DEBUG<INFO<WARN<ERROR
            additivity：作用在于children-logger是否使用rootLogger配置的appender进行输出，
            false：表示只用当前logger的appender-ref，true：
            表示当前logger的appender-ref和rootLogger的appender-ref都有效
     -->
    <!--定制显示个别类的日志信息-->
    <appender name="DemoTest" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{10}) - %cyan(%msg%n)</pattern>
        </encoder>
    </appender>
    <!--
            显示个别类的debug信息
            additivity为false，则root不打印此类的信息，只有此logging打印，输出一份
            如果使用默认true，则root、此logging按此logging的level输出日志信息,输出两份
    -->
    <logger name="org.springframework" level="info" additivity="false">
        <appender-ref ref="stdout"/>
    </logger>
    <logger name="com.hnanet._0_init" level="debug" additivity="false">
        <appender-ref ref="stdout"/>
    </logger>
    <!--
            root与logger是父子关系，没有特别定义则默认为root；
            也是logger元素，最上层的logger，属性只有一个level
    -->
    <root level="debug">
        <!-- Console显示 -->
        <appender-ref ref="stdout"/>
        <!-- 记录到文件 -->
        <!-- <appender-ref ref="appLogAppender"/>-->
    </root>

</configuration>